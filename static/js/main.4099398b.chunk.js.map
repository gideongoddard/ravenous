{"version":3,"sources":["components/Business/Business.js","util/Yelp.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","alt","name","address","city","zipCode","category","rating","reviewCount","React","Component","Yelp","search","term","location","sortBy","fetch","headers","Authorization","then","response","json","jsonResponse","businesses","map","id","imageSrc","image_url","address1","state","zip_code","categories","title","review_count","BusinessList","list","key","SearchBar","sortByOptions","handleSortByChange","bind","handleTermChange","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","renderSortByOptions","onChange","placeholder","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4099398b.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render() {\n        const { business } = this.props;\n        return (\n            <div className=\"Business\">\n            <div className=\"image-container\">\n                <img src='https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg' alt=''/>\n            </div>\n            <h2>{business.name}</h2>\n            <div className=\"Business-information\">\n                <div className=\"Business-address\">\n                <p>{business.address}</p>\n                <p>{business.city}</p>\n                <p>{business.city} {business.zipCode}</p>\n                </div>\n                <div className=\"Business-reviews\">\n                <h3>{business.category}</h3>\n                <h3 className=\"rating\">{business.rating}</h3>\n                <p>{business.reviewCount}</p>\n                </div>\n            </div>\n            </div>\n        )\n    }\n}\n\nexport default Business;","const apiKey = 'nCjXAsAoLwYKSmC35HrKaq0Lclr0NS3TMXf60dz38PX12bVEyValREDGQzwsO43MaudQQFmEb3MX88dnzy-KH9vARdzUCOPIy2jN9WJ7qfpRXnYtI63Nr_a8U8glXnYx';\n\nconst Yelp = {\n    search(term, location, sortBy) {\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n            headers: {Authorization: `Bearer ${apiKey}`}}).then((response) => {\n                return response.json();\n            }).then((jsonResponse) => {\n                if(jsonResponse.businesses) {\n                    return jsonResponse.businesses.map((business) => {\n                        return {\n                            id: business.id,\n                            imageSrc: business.image_url,\n                            name: business.name,\n                            address: business.location.address1,\n                            city: business.location.city,\n                            state: business.location.state,\n                            zipCode: business.location.zip_code,\n                            category: business.categories[0].title,\n                            rating: business.rating,\n                            reviewCount: business.review_count\n                        }\n                    });\n                }\n            });\n    }\n}\n\nexport default Yelp;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business.js';\nimport { Yelp } from '../../util/Yelp.js';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {\n                    this.props.list.map((business) => {\n                        return <Business key={business.id} business={business} />;\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match'\n        }\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count',\n        };\n        this.handleSortByChange = this.handleSortByChange.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n    }\n\n    getSortByClass(sortByOption) {\n        if(this.state.sortBy === sortByOption) {\n            return 'active';\n        } else {\n            return '';\n        }\n    }\n\n    handleSortByChange(sortByOption) {\n        this.setState({\n            sortBy: sortByOption\n        })\n    }\n\n    handleTermChange(event) {\n        this.setState({\n            term: event.target.value\n        })\n    }\n\n    handleLocationChange(event) {\n        this.setState({\n            location: event.target.value\n        })\n    }\n\n    handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault();\n    }\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return <li className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)} key={sortByOptionValue} >{sortByOption}</li>;\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                    {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a onClick={this.handleSearch} >Let's Go</a>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList.js';\nimport SearchBar from '../SearchBar/SearchBar.js';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: [],\n    }\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then((businesses) => {\n      this.setState({\n        businesses: businesses\n      })\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList list={this.state.businesses} /> \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}